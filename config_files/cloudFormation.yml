  AWSTemplateFormatVersion: '2010-09-09'
  Description: CloudFormation Template for SignIn, SignUp, and uploadImage Lambda functions with API Gateway

  Resources:
    # IAM Role for Lambda
    LambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service: 'lambda.amazonaws.com'
              Action: 'sts:AssumeRole'
        Policies:
          - PolicyName: 'LambdaPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:*"
                  - "dax:*"
                  - "application-autoscaling:DeleteScalingPolicy"
                  - "application-autoscaling:DeregisterScalableTarget"
                  - "application-autoscaling:DescribeScalableTargets"
                  - "application-autoscaling:DescribeScalingActivities"
                  - "application-autoscaling:DescribeScalingPolicies"
                  - "application-autoscaling:PutScalingPolicy"
                  - "application-autoscaling:RegisterScalableTarget"
                  - "cloudwatch:DeleteAlarms"
                  - "cloudwatch:DescribeAlarmHistory"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:DescribeAlarmsForMetric"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:GetMetricData"
                  - "datapipeline:ActivatePipeline"
                  - "datapipeline:CreatePipeline"
                  - "datapipeline:DeletePipeline"
                  - "datapipeline:DescribeObjects"
                  - "datapipeline:DescribePipelines"
                  - "datapipeline:GetPipelineDefinition"
                  - "datapipeline:ListPipelines"
                  - "datapipeline:PutPipelineDefinition"
                  - "datapipeline:QueryObjects"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "iam:GetRole"
                  - "iam:ListRoles"
                  - "kms:DescribeKey"
                  - "kms:ListAliases"
                  - "sns:CreateTopic"
                  - "sns:DeleteTopic"
                  - "sns:ListSubscriptions"
                  - "sns:ListSubscriptionsByTopic"
                  - "sns:ListTopics"
                  - "sns:Subscribe"
                  - "sns:Unsubscribe"
                  - "sns:SetTopicAttributes"
                  - "lambda:CreateFunction"
                  - "lambda:ListFunctions"
                  - "lambda:ListEventSourceMappings"
                  - "lambda:CreateEventSourceMapping"
                  - "lambda:DeleteEventSourceMapping"
                  - "lambda:GetFunctionConfiguration"
                  - "lambda:DeleteFunction"
                  - "resource-groups:ListGroups"
                  - "resource-groups:ListGroupResources"
                  - "resource-groups:GetGroup"
                  - "resource-groups:GetGroupQuery"
                  - "resource-groups:DeleteGroup"
                  - "resource-groups:CreateGroup"
                  - "tag:GetResources"
                  - "kinesis:ListStreams"
                  - "kinesis:DescribeStream"
                  - "kinesis:DescribeStreamSummary"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:ListStackResources"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:GetMetricData"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcs"
                  - "kms:ListAliases"
                  - "iam:GetPolicy"
                  - "iam:GetPolicyVersion"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListRolePolicies"
                  - "iam:ListRoles"
                  - "lambda:*"
                  - "logs:DescribeLogGroups"
                  - "states:DescribeStateMachine"
                  - "states:ListStateMachines"
                  - "tag:GetResources"
                  - "xray:GetTraceSummaries"
                  - "xray:BatchGetTraces"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                Resource: "*"

    
            

    # SignIn Lambda function
    SignInFunction:
      Type: 'AWS::Lambda::Function'
      Properties: 
        FunctionName: SignInFunction
        Handler: 'index.handler'
        Role: !GetAtt LambdaExecutionRole.Arn
        Code:
          S3Bucket: code-project-backend
          S3Key: singIn.zip
        Runtime: 'Python 3.12'
        MemorySize: 128
        Timeout: 15

    # SignUp Lambda function
    # SignUpFunction:
    #   Type: 'AWS::Lambda::Function'
    #   Properties: 
    #     FunctionName: SignUpFunction
    #     Handler: 'index.handler'
    #     Role: !GetAtt LambdaExecutionRole.Arn
    #     Code:
    #       S3Bucket: code-project-backend
    #       S3Key: signUp.zip
    #     Runtime: 'Python 3.12'
    #     MemorySize: 128
    #     Timeout: 15

    # UploadImage Lambda function
    # UploadImageFunction:
    #   Type: 'AWS::Lambda::Function'
    #   Properties: 
    #     FunctionName: UploadImageFunction
    #     Handler: 'index.handler'
    #     Role: !GetAtt LambdaExecutionRole.Arn
    #     Code:
    #       S3Bucket: code-project-backend
    #       S3Key: uploadImage.zip
    #     Runtime: 'Python 3.12'
    #     MemorySize: 128
    #     Timeout: 15

    # API Gateway
    APIGatewayRestApi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Name: LambdaAPIGateway

    # SignIn API Resource and Method
    SignInResource:
      Type: 'AWS::ApiGateway::Resource'
      Properties:
        ParentId: !GetAtt APIGatewayRestApi.RootResourceId
        PathPart: 'signin'
        RestApiId: !Ref APIGatewayRestApi

    SignInMethod:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        AuthorizationType: 'NONE'
        HttpMethod: 'POST'
        ResourceId: !Ref SignInResource
        RestApiId: !Ref APIGatewayRestApi
        Integration:
          IntegrationHttpMethod: 'POST'
          Type: 'AWS_PROXY'
          #Uri: 
            #Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignInFunction.Arn}/invocations

    # SignUp API Resource and Method
    # SignUpResource:
    #   Type: 'AWS::ApiGateway::Resource'
    #   Properties:
    #     ParentId: !GetAtt APIGatewayRestApi.RootResourceId
    #     PathPart: ''
    #     RestApiId: !Ref APIGatewayRestApi

    # SignUpMethod:
    #   Type: 'AWS::ApiGateway::Method'
    #   Properties:
    #     AuthorizationType: 'NONE'
    #     HttpMethod: 'POST'
    #     ResourceId: !Ref SignUpResource
    #     RestApiId: !Ref APIGatewayRestApi
    #     Integration:
    #       IntegrationHttpMethod: 'POST'
    #       Type: 'AWS_PROXY'
          

    # UploadImage API Resource and Method
    # UploadImageResource:
    #   Type: 'AWS::ApiGateway::Resource'
    #   Properties:
    #     ParentId: !GetAtt APIGatewayRestApi.RootResourceId
    #     PathPart: ''
    #     RestApiId: !Ref APIGatewayRestApi

    # UploadImageMethod:
    #   Type: 'AWS::ApiGateway::Method'
    #   Properties:
    #     AuthorizationType: 'NONE'
    #     HttpMethod: 'POST'
    #     ResourceId: !Ref UploadImageResource
    #     RestApiId: !Ref APIGatewayRestApi
    #     Integration:
    #       IntegrationHttpMethod: 'POST'
    #       Type: 'AWS_PROXY'
          #Uri: 
            #Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadImageFunction.Arn}/invocations

    # Grant permission to Lambda functions to be invoked by API Gateway
    SignInLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !Ref SignInFunction
        Action: 'lambda:InvokeFunction'
        Principal: 'apigateway.amazonaws.com'
    
    # SignUpLambdaPermission:
    #   Type: 'AWS::Lambda::Permission'
    #   Properties:
    #     FunctionName: !Ref SignUpFunction
    #     Action: 'lambda:InvokeFunction'
    #     Principal: 'apigateway.amazonaws.com'

    # UploadImageLambdaPermission:
    #   Type: 'AWS::Lambda::Permission'
    #   Properties:
    #     FunctionName: !Ref UploadImageFunction
    #     Action: 'lambda:InvokeFunction'
    #     Principal: 'apigateway.amazonaws.com'

  Outputs:
    ApiGatewayURL:
      Description: 'API Gateway URL'
      Value: !Sub 'https://${APIGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
